apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: example-mydevice-kubelet-plugin
  namespace: default
  labels:
    app: example-mydevice-kubelet-plugin
spec:
  selector:
    matchLabels:
      app: example-mydevice-kubelet-plugin
  template:
    metadata:
      labels:
        app: example-mydevice-kubelet-plugin
    spec:
      serviceAccount: example-dra-resource-driver-service-account
      serviceAccountName: example-dra-resource-driver-service-account
      containers:
      - name: kubelet-plugin
        image: registry.local/example-resource-driver:v0.0.1-alpha
        imagePullPolicy: Always
        command: ["/kubelet-plugin", "-v", "5"]
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        securityContext:
          privileged: true
        volumeMounts:
        - name: plugins-registry
          mountPath: /var/lib/kubelet/plugins_registry
        - name: plugins
          mountPath: /var/lib/kubelet/plugins
        - name: cdi
          mountPath: /etc/cdi
        - name: varruncdi
          mountPath: /var/run/cdi
        securityContext:
           privileged: true
      volumes:
      - name: plugins-registry
        hostPath:
          path: /var/lib/kubelet/plugins_registry
      - name: plugins
        hostPath:
          path: /var/lib/kubelet/plugins
      - name: cdi
        hostPath:
          path: /etc/cdi
      - name: varruncdi
        hostPath:
          path: /var/run/cdi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-mydevice-controller
  namespace: default
  labels:
    app: example-mydevice-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: example-mydevice-controller
  template:
    metadata:
      labels:
        app: example-mydevice-controller
    spec:
      serviceAccount: example-dra-resource-driver-service-account
      serviceAccountName: example-dra-resource-driver-service-account
      containers:
      - name: controller
        image: registry.local/example-resource-driver:v0.0.1-alpha
        imagePullPolicy: Always
        command: ["/controller", "-v", "6"]
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ "ALL" ]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-dra-resource-driver-service-account
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: example-dra-resource-driver-role
  namespace: default
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "events"]
  verbs: ["get", "list", "create", "watch", "patch"]
- apiGroups: ["resource.k8s.io"]
  resources: ["resourceclaims", "resourceclasses", "podschedulings","resourceclaims/status", "podschedulings/status"]
  verbs: ["get", "update", "list", "watch", "patch"]
- apiGroups: ["dra.example.com"]
  resources: ["*"]
  verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: example-dra-resource-driver-role-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: example-dra-resource-driver-service-account
  namespace: default
roleRef:
  kind: ClusterRole
  name: example-dra-resource-driver-role
  apiGroup: rbac.authorization.k8s.io
