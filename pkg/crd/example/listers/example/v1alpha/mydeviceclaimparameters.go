/*
Copyright 2023 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "github.com/kubernetes-sigs/dra-example-driver/pkg/crd/example/v1alpha"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MydeviceClaimParametersLister helps list MydeviceClaimParameters.
// All objects returned here must be treated as read-only.
type MydeviceClaimParametersLister interface {
	// List lists all MydeviceClaimParameters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha.MydeviceClaimParameters, err error)
	// MydeviceClaimParameters returns an object that can list and get MydeviceClaimParameters.
	MydeviceClaimParameters(namespace string) MydeviceClaimParametersNamespaceLister
	MydeviceClaimParametersListerExpansion
}

// mydeviceClaimParametersLister implements the MydeviceClaimParametersLister interface.
type mydeviceClaimParametersLister struct {
	indexer cache.Indexer
}

// NewMydeviceClaimParametersLister returns a new MydeviceClaimParametersLister.
func NewMydeviceClaimParametersLister(indexer cache.Indexer) MydeviceClaimParametersLister {
	return &mydeviceClaimParametersLister{indexer: indexer}
}

// List lists all MydeviceClaimParameters in the indexer.
func (s *mydeviceClaimParametersLister) List(selector labels.Selector) (ret []*v1alpha.MydeviceClaimParameters, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.MydeviceClaimParameters))
	})
	return ret, err
}

// MydeviceClaimParameters returns an object that can list and get MydeviceClaimParameters.
func (s *mydeviceClaimParametersLister) MydeviceClaimParameters(namespace string) MydeviceClaimParametersNamespaceLister {
	return mydeviceClaimParametersNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MydeviceClaimParametersNamespaceLister helps list and get MydeviceClaimParameters.
// All objects returned here must be treated as read-only.
type MydeviceClaimParametersNamespaceLister interface {
	// List lists all MydeviceClaimParameters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha.MydeviceClaimParameters, err error)
	// Get retrieves the MydeviceClaimParameters from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha.MydeviceClaimParameters, error)
	MydeviceClaimParametersNamespaceListerExpansion
}

// mydeviceClaimParametersNamespaceLister implements the MydeviceClaimParametersNamespaceLister
// interface.
type mydeviceClaimParametersNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MydeviceClaimParameters in the indexer for a given namespace.
func (s mydeviceClaimParametersNamespaceLister) List(selector labels.Selector) (ret []*v1alpha.MydeviceClaimParameters, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.MydeviceClaimParameters))
	})
	return ret, err
}

// Get retrieves the MydeviceClaimParameters from the indexer for a given namespace and name.
func (s mydeviceClaimParametersNamespaceLister) Get(name string) (*v1alpha.MydeviceClaimParameters, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("mydeviceclaimparameters"), name)
	}
	return obj.(*v1alpha.MydeviceClaimParameters), nil
}
